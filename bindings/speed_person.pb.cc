// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speed_person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speed_person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpeedPerson_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPerson_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_speed_5fperson_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_speed_5fperson_2eproto() {
  protobuf_AddDesc_speed_5fperson_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speed_person.proto");
  GOOGLE_CHECK(file != NULL);
  SpeedPerson_descriptor_ = file->message_type(0);
  static const int SpeedPerson_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPerson, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPerson, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPerson, email_),
  };
  SpeedPerson_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeedPerson_descriptor_,
      SpeedPerson::internal_default_instance(),
      SpeedPerson_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpeedPerson),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPerson, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speed_5fperson_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeedPerson_descriptor_, SpeedPerson::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speed_5fperson_2eproto() {
  SpeedPerson_default_instance_.Shutdown();
  delete SpeedPerson_reflection_;
}

void protobuf_InitDefaults_speed_5fperson_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SpeedPerson_default_instance_.DefaultConstruct();
  SpeedPerson_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_speed_5fperson_2eproto_once_);
void protobuf_InitDefaults_speed_5fperson_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_speed_5fperson_2eproto_once_,
                 &protobuf_InitDefaults_speed_5fperson_2eproto_impl);
}
void protobuf_AddDesc_speed_5fperson_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_speed_5fperson_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022speed_person.proto\"6\n\013SpeedPerson\022\014\n\004n"
    "ame\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\r\n\005email\030\003 \001(\tB\005H\001"
    "\370\001\001b\006proto3", 91);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speed_person.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speed_5fperson_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_speed_5fperson_2eproto_once_);
void protobuf_AddDesc_speed_5fperson_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_speed_5fperson_2eproto_once_,
                 &protobuf_AddDesc_speed_5fperson_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speed_5fperson_2eproto {
  StaticDescriptorInitializer_speed_5fperson_2eproto() {
    protobuf_AddDesc_speed_5fperson_2eproto();
  }
} static_descriptor_initializer_speed_5fperson_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPerson::kNameFieldNumber;
const int SpeedPerson::kIdFieldNumber;
const int SpeedPerson::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPerson::SpeedPerson()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_speed_5fperson_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpeedPerson)
}
SpeedPerson::SpeedPerson(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_speed_5fperson_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpeedPerson)
}

void SpeedPerson::InitAsDefaultInstance() {
}

SpeedPerson::SpeedPerson(const SpeedPerson& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpeedPerson)
}

void SpeedPerson::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

SpeedPerson::~SpeedPerson() {
  // @@protoc_insertion_point(destructor:SpeedPerson)
  SharedDtor();
}

void SpeedPerson::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  email_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SpeedPerson::ArenaDtor(void* object) {
  SpeedPerson* _this = reinterpret_cast< SpeedPerson* >(object);
  (void)_this;
}
void SpeedPerson::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeedPerson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPerson::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPerson_descriptor_;
}

const SpeedPerson& SpeedPerson::default_instance() {
  protobuf_InitDefaults_speed_5fperson_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpeedPerson> SpeedPerson_default_instance_;

SpeedPerson* SpeedPerson::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeedPerson>(arena);
}

void SpeedPerson::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeedPerson)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_ = 0;
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SpeedPerson::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpeedPerson)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeedPerson.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeedPerson.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpeedPerson)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpeedPerson)
  return false;
#undef DO_
}

void SpeedPerson::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpeedPerson)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeedPerson.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeedPerson.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // @@protoc_insertion_point(serialize_end:SpeedPerson)
}

::google::protobuf::uint8* SpeedPerson::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SpeedPerson)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeedPerson.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeedPerson.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpeedPerson)
  return target;
}

size_t SpeedPerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeedPerson)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPerson::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeedPerson)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpeedPerson* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPerson>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeedPerson)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeedPerson)
    UnsafeMergeFrom(*source);
  }
}

void SpeedPerson::MergeFrom(const SpeedPerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeedPerson)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpeedPerson::UnsafeMergeFrom(const SpeedPerson& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.email().size() > 0) {
    set_email(from.email());
  }
}

void SpeedPerson::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeedPerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPerson::CopyFrom(const SpeedPerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeedPerson)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpeedPerson::IsInitialized() const {

  return true;
}

void SpeedPerson::Swap(SpeedPerson* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeedPerson temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SpeedPerson::UnsafeArenaSwap(SpeedPerson* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeedPerson::InternalSwap(SpeedPerson* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  email_.Swap(&other->email_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPerson::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPerson_descriptor_;
  metadata.reflection = SpeedPerson_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPerson

// optional string name = 1;
void SpeedPerson::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpeedPerson::name() const {
  // @@protoc_insertion_point(field_get:SpeedPerson.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpeedPerson::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:SpeedPerson.name)
}
void SpeedPerson::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:SpeedPerson.name)
}
void SpeedPerson::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:SpeedPerson.name)
}
::std::string* SpeedPerson::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SpeedPerson.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeedPerson::release_name() {
  // @@protoc_insertion_point(field_release:SpeedPerson.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeedPerson::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SpeedPerson.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpeedPerson::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:SpeedPerson.name)
}
void SpeedPerson::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SpeedPerson.name)
}

// optional int32 id = 2;
void SpeedPerson::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 SpeedPerson::id() const {
  // @@protoc_insertion_point(field_get:SpeedPerson.id)
  return id_;
}
void SpeedPerson::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SpeedPerson.id)
}

// optional string email = 3;
void SpeedPerson::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpeedPerson::email() const {
  // @@protoc_insertion_point(field_get:SpeedPerson.email)
  return email_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpeedPerson::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:SpeedPerson.email)
}
void SpeedPerson::set_email(const char* value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:SpeedPerson.email)
}
void SpeedPerson::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:SpeedPerson.email)
}
::std::string* SpeedPerson::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:SpeedPerson.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeedPerson::release_email() {
  // @@protoc_insertion_point(field_release:SpeedPerson.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeedPerson::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SpeedPerson.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpeedPerson::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:SpeedPerson.email)
}
void SpeedPerson::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SpeedPerson.email)
}

inline const SpeedPerson* SpeedPerson::internal_default_instance() {
  return &SpeedPerson_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
