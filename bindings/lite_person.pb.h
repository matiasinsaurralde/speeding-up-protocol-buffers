// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lite_person.proto

#ifndef PROTOBUF_lite_5fperson_2eproto__INCLUDED
#define PROTOBUF_lite_5fperson_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lite_5fperson_2eproto();
void protobuf_InitDefaults_lite_5fperson_2eproto();
void protobuf_AssignDesc_lite_5fperson_2eproto();
void protobuf_ShutdownFile_lite_5fperson_2eproto();

class LitePerson;

// ===================================================================

class LitePerson : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:LitePerson) */ {
 public:
  LitePerson();
  virtual ~LitePerson();

  LitePerson(const LitePerson& from);

  inline LitePerson& operator=(const LitePerson& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const LitePerson& default_instance();

  static const LitePerson* internal_default_instance();

  void UnsafeArenaSwap(LitePerson* other);
  void Swap(LitePerson* other);

  // implements Message ----------------------------------------------

  inline LitePerson* New() const { return New(NULL); }

  LitePerson* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LitePerson& from);
  void MergeFrom(const LitePerson& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LitePerson* other);
  void UnsafeMergeFrom(const LitePerson& from);
  protected:
  explicit LitePerson(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  ::std::string* unsafe_arena_release_email();
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // @@protoc_insertion_point(class_scope:LitePerson)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_lite_5fperson_2eproto_impl();
  friend void  protobuf_AddDesc_lite_5fperson_2eproto_impl();
  friend void protobuf_AssignDesc_lite_5fperson_2eproto();
  friend void protobuf_ShutdownFile_lite_5fperson_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LitePerson> LitePerson_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LitePerson

// optional string name = 1;
inline void LitePerson::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LitePerson::name() const {
  // @@protoc_insertion_point(field_get:LitePerson.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LitePerson::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:LitePerson.name)
}
inline void LitePerson::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:LitePerson.name)
}
inline void LitePerson::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:LitePerson.name)
}
inline ::std::string* LitePerson::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:LitePerson.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LitePerson::release_name() {
  // @@protoc_insertion_point(field_release:LitePerson.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LitePerson::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LitePerson.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LitePerson::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:LitePerson.name)
}
inline void LitePerson::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LitePerson.name)
}

// optional int32 id = 2;
inline void LitePerson::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LitePerson::id() const {
  // @@protoc_insertion_point(field_get:LitePerson.id)
  return id_;
}
inline void LitePerson::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:LitePerson.id)
}

// optional string email = 3;
inline void LitePerson::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LitePerson::email() const {
  // @@protoc_insertion_point(field_get:LitePerson.email)
  return email_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LitePerson::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:LitePerson.email)
}
inline void LitePerson::set_email(const char* value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:LitePerson.email)
}
inline void LitePerson::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:LitePerson.email)
}
inline ::std::string* LitePerson::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:LitePerson.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LitePerson::release_email() {
  // @@protoc_insertion_point(field_release:LitePerson.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LitePerson::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LitePerson.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LitePerson::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:LitePerson.email)
}
inline void LitePerson::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LitePerson.email)
}

inline const LitePerson* LitePerson::internal_default_instance() {
  return &LitePerson_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lite_5fperson_2eproto__INCLUDED
